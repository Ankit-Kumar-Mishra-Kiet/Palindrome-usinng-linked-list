#include <bits/stdc++.h>
using namespace std;
 
class Node {
public:
    int data;
    Node(int d) { data = d; }
    Node* next;
};
 
// Function to check if the linked list
// is palindrome or notbool isPalin(Node* head)
bool isPalin(Node* head)
{
 
    // Temp pointer
    Node* slow = head;
 
    // Declare a stack
    stack<int> s;
 
    // Push all elements of the list
    // to the stack
    while (slow != NULL) {
        s.push(slow->data);
 
        // Move ahead
        slow = slow->next;
    }
 
    // Iterate in the list again and
    // check by popping from the stack
    while (head != NULL) {
 
        // Get the top most element
        int i = s.top();
 
        // Pop the element
        s.pop();
 
        // Check if data is not
        // same as popped element
        if (head->data != i) {
           return false;
        }
 
        // Move ahead
        head = head->next;
    }
 
    return true;
}
void addatbeg(Node**head,int item)
{
    Node* newnode;
    newnode=(Node*)malloc(sizeof(Node));
    newnode->data=item;
    newnode->next=*head;
    *head=newnode;
}
 
 void display(Node*head)
 {
     Node*p;
     p=head;
     while(p!=NULL)
     {printf("%d",p->data);
     p=p->next;}
 }
 int main()
 {int choice,item,result;
 Node* head=NULL;
    while(1)
    {
    printf("\n.insert\n2.disp3\n3.exit");
    scanf("%d",&choice);
    switch(choice)
    {
        case 1:printf("\nEnter");
        scanf("%d",&item);
 addatbeg(&head,item);
    break;
   case 2:display(head);
    break;
    case 3:
    result = isPalin(head);
 
    if (result == 1)
        {cout << "isPalindrome is true\n\n";
        exit(1);}
    else
        {cout << "isPalindrome is false\n\n";
        exit(1);}
    break;
    case 4:exit(1);
    default:printf("no");
    }
        
    }
 }